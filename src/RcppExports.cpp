// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_computeAllProbabilities
NumericMatrix rcpp_computeAllProbabilities(NumericVector observations, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_rcpp_computeAllProbabilities(SEXP observationsSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_computeAllProbabilities(observations, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_backwardVector
NumericMatrix rcpp_backwardVector(NumericVector observations, NumericMatrix transitionMatrix, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_rcpp_backwardVector(SEXP observationsSEXP, SEXP transitionMatrixSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_backwardVector(observations, transitionMatrix, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}
// computeCentralDistribution
double computeCentralDistribution(double x, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_computeCentralDistribution(SEXP xSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(computeCentralDistribution(x, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_forwardVector
NumericMatrix rcpp_forwardVector(NumericVector observations, NumericMatrix transitionMatrix, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_rcpp_forwardVector(SEXP observationsSEXP, SEXP transitionMatrixSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_forwardVector(observations, transitionMatrix, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_computeNRDenom
double rcpp_computeNRDenom(NumericVector x, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_rcpp_computeNRDenom(SEXP xSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_computeNRDenom(x, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pointDensity
double rcpp_pointDensity(double x, double theta, double p, double b, int N);
RcppExport SEXP _semiparametrichmm_rcpp_pointDensity(SEXP xSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pointDensity(x, theta, p, b, N));
    return rcpp_result_gen;
END_RCPP
}
// NewtonRaphson
double NewtonRaphson(NumericVector data, double theta, double p, int max_iteration);
RcppExport SEXP _semiparametrichmm_NewtonRaphson(SEXP dataSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP max_iterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type max_iteration(max_iterationSEXP);
    rcpp_result_gen = Rcpp::wrap(NewtonRaphson(data, theta, p, max_iteration));
    return rcpp_result_gen;
END_RCPP
}
// optimizationTargetFunction
double optimizationTargetFunction(NumericVector x, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_optimizationTargetFunction(SEXP xSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizationTargetFunction(x, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_RecursiveBaumWelch
NumericMatrix rcpp_RecursiveBaumWelch(NumericVector observations, NumericMatrix transitionMatrix, double theta, double p, double b);
RcppExport SEXP _semiparametrichmm_rcpp_RecursiveBaumWelch(SEXP observationsSEXP, SEXP transitionMatrixSEXP, SEXP thetaSEXP, SEXP pSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_RecursiveBaumWelch(observations, transitionMatrix, theta, p, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_semiparametrichmm_rcpp_computeAllProbabilities", (DL_FUNC) &_semiparametrichmm_rcpp_computeAllProbabilities, 4},
    {"_semiparametrichmm_rcpp_backwardVector", (DL_FUNC) &_semiparametrichmm_rcpp_backwardVector, 5},
    {"_semiparametrichmm_computeCentralDistribution", (DL_FUNC) &_semiparametrichmm_computeCentralDistribution, 4},
    {"_semiparametrichmm_rcpp_forwardVector", (DL_FUNC) &_semiparametrichmm_rcpp_forwardVector, 5},
    {"_semiparametrichmm_rcpp_computeNRDenom", (DL_FUNC) &_semiparametrichmm_rcpp_computeNRDenom, 4},
    {"_semiparametrichmm_rcpp_pointDensity", (DL_FUNC) &_semiparametrichmm_rcpp_pointDensity, 5},
    {"_semiparametrichmm_NewtonRaphson", (DL_FUNC) &_semiparametrichmm_NewtonRaphson, 4},
    {"_semiparametrichmm_optimizationTargetFunction", (DL_FUNC) &_semiparametrichmm_optimizationTargetFunction, 4},
    {"_semiparametrichmm_rcpp_RecursiveBaumWelch", (DL_FUNC) &_semiparametrichmm_rcpp_RecursiveBaumWelch, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_semiparametrichmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
